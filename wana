#!/bin/bash 

#Author - Nikita Zhukov (xzhuko01@vutbr.cz)
#Date - 18.03.2019
#Subject - IOS
#Project 1

POSIXLY_CORRECT=yes

PROGRAM=$(basename $0) #the name of the script
ARGS=$# #number of arguments 
#ALLOPS=() #assaign all switches entered in to one array
#SEQ=0
CMD=-1 #can be just one
CMDCounter=0
#filters:
FLTRRegex='(-a|-b|-ip|-uri$)'
FLTRCounter=0
FLTRS=()
LOGS='' #logs
IPADDR='([0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}|^[0-9a-fA-F]{1,4}:[0-9a-fA-F]{1,4}:[0-9a-fA-F]{1,4}:[0-9a-fA-F]{1,4}:[0-9a-fA-F]{1,4}:[0-9a-fA-F]{1,4}:[0-9a-fA-F]{1,4}:[0-9a-fA-F]{1,4}$)'
IPFOUND='' #for -ip filter
DATETIME=('[0-9]{1,3}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}')
#DATETIME_A=''
#DATETIME_B=''
URI=''
resultSTDIN=0

usage()
{
	echo $PROGRAM : usage: $PROGRAM [filtr] [cmd] [log[log[log ...]] >&2
	exit 1
}

#If stdin has 2 commands, program will throw error
errCMD()
{
	if [ $CMDCounter -gt 1 ]; then
		echo $PROGRAM: argument error: Command can be just one 
		exit 1
	fi	
}

errFLTR()
{
	if [ $FLTRCounter -gt 4 ]; then
		echo $PROGRAM: argument error: Maximum limit of using filters is 4
		exit 1
	fi
}

errDate()
{
	#tmp=$DATETIME_B - $DATETIME_A
	if [ $DATETIME_B -le $DATETIME ]; then
		echo $PROGRAM: argument error: DATE error >&2
	elif [ $DATETIME_B -eq $DATETIME ]; then
		echo $PROGRAM: argument error: DATE error >&2
	fi
}

#Control if file is suitable
checkLog()
{
	result=0
	if [[ $1 =~ .log$|.log.[0-9]$ ]]; then
		result=1
	elif [[ $1 =~ .gz$ ]]; then
		result=2	
	fi
}

funcREAD()
{
		checkLog $1
		if [ $result -eq 1 ]; then
			#LOGS=$(cat $1 | awk '{print $1}')
			LOGF=$(cat $1)
			LOGS=$(printf "%s\n" "$LOGS";printf "%s\n" "$LOGF")
		elif [ $result -eq 2 ]; then
			LOGF=$(gunzip -c $1)
			LOGS=$(printf "%s\n" "$LOGS";printf "%s\n" "$LOGF")
		elif [ $resultSTDIN -eq 1 ]; then
			LOGS=$STDIN
		#if result equals 0 that means something wrong was typed in 
		else [ $result -eq 0 ]
			read -s 
		fi	
}

#/wana.sh 
if [[ $ARGS -eq 0 ]]; then
	usage
        exit 1
fi

#wana.sh file 
#if [ $ARGS -eq 1 ]; then
#	checkLog $1
#	if [ $result -eq 1 ]; then
#		cat $1
#	elif [ $result -eq 2 ]; then
#		gunzip -c $1
#	else
#		usage
#	fi
#fi

#read stdin
if [ $ARGS -ge 1 ]; then
	while [ $# -gt 0 ] ; do
		errCMD
		errFLTR

		#filters
		case ${1} in
			-a)  FLTRS+="$1" 
				if [[ $2 =~ $DATETIME ]]; then
					#convert date from stdin to seconds
					DATETIME_A=$2
				else
					echo $PROGRAM: argument error: DATETIME is not correct
					exit 1
				fi
				shift
				shift
				continue
				((FLTRCounter ++));;
			-b)  FLTRS+="$1"
				if [[ $2 =~ $DATETIME ]]; then
					DATETIME_B=$(date -d "$2" +%s)
					errDATE
				fi
					((FLTRCounter ++))
					continue 
					shift;;
			-ip) FLTRS+="$1"
			 	if [[ $2 =~ $IPADDR ]]; then
					IPFOUND=$2 
					((FLTRCounter ++))
					shift
					shift
					continue
				else
					echo "-ip IPv6 or IPv4"
					exit 1
				fi;;
			-uri) FLTRS+="$1"; URI=$2
				((FLTRCounter ++)); shift; shift; 
				continue
				;;
			
			#cmds
			list-ip) CMD=$1;  ((CMDCounter ++)); shift; continue;;
			list-hosts) CMD=$1; ((CMDCounter ++)); shift; continue;;
			list-uri) CMD=$1; ((CMDCounter ++)); shift; continue;;
			hist-ip) CMD=$1; ((CMDCounter ++)); shift; continue;;
			hist-load) CMD=$1; ((CMDCounter ++)); shift; continue;; 	
		esac
		#checkLog $1
		#if [ $result -eq 1 ]; then
		#	#LOGS=$(cat $1 | awk '{print $1}')
		#	readLog $1
		#	shift	
		#elif [ $result -eq 2 ]; then
		#	readLogGZ $1
		#	shift
		#fi
		
		funcREAD $1; shift; continue;
	done
	
	#if program did not get any logs
	if [[ $result -eq 0 ]]; then
		STDIN=$(echo "$(</dev/stdin)")
		resultSTDIN=1
		funcREAD $STDIN
	fi	
fi

#cut first string, because it's empty due to "printf "\n" -> see fncREAD"
LOGS=$(echo "$LOGS" | sed '1d')

#main
fncFLTR_A()
{
	echo +
}

fncFLTR_B()
{
	echo +
}

fncFLTR_IP()
{
	 LOGS=$(echo "$LOGS" | grep "$IPFOUND")
	 if [ -z "$LOGS" ]; then
		echo IP was not found
		exit 1
	 fi
}

fncFLTR_URI()
{
	LOGS=$(echo "$LOGS" | grep "$URI")
	if [ -z "$LOGS" ]; then
		echo URI was not found
		exit 1
	fi
}

#function for reading IPs
fncListIp()
{
	LOGS=$(echo "$LOGS" | cut -d "-" -f1 | sort -u)
}

fncListHosts()
{ 
	LOGS=$(echo "$LOGS" | cut -d "-" -f1 | sort -u |
		while read line; do
		tmp=$(host "$line")
		if [ $? -eq 1 ]; then
			echo "$line" 
		else
			echo "$tmp" | awk '{print $5}'
		fi; 
		done) 	
}

fncListUri()
{
	LOGS=$(echo "$LOGS" | awk '/GET|POST/{print $7}' | sort -u)	
}

fncHistIp()
{	
	LOGS=$(echo "$LOGS" | cut -d "-" -f1 | 
			awk '{IP[$1] ++} END{for (i in IP) {printf "%s (%d): ", i, IP[i]; for (z=0; z < IP[i]; z++) printf "#"; printf "\n"}}' | 
			sort -r -k 3)
}

fncHistLoad()
{
	LOGS=$(echo "$LOGS" | awk '//{print $4}' | cut -c2- | sed -e 's:/::g' -e 's/://g' -e 's/Jan/01/;s/Feb/02/;s/Mar/03/;s/Apr/04/;s/May/05/;s/Jun/06/;s/Jul/07/;s/Aug/08/;s/Sep/09/;s/Oct/10/;s/Nov/11/;s/Dec/12/;' |

		awk 'BEGIN { FIELDWIDTHS = "2 2 4 2 2 2" } { printf "%s-%s-%s %s:%s:%s\n",$3, $2, $1, $4, $5, $6} ' | 
		cut -c 1-16 | sed -e 's/./0/15;s/./0/16;' |
		awk '{IP[$0] ++} END{for (i in IP) {printf "%s (%d): ", i, IP[i]; for (z=0; z < IP[i]; z++) printf "#"; printf "\n"}}' |
		sort -k 1 
)	
}

if [[ $LOGS ]]; then
	for i in "${FLTRS[@]}"; do
		case ${i} in
			-a) fncFLTR_A ;;
			-b) fncFLTR_B ;;
			-ip) fncFLTR_IP ;;
			-uri) fncFLTR_URI ;;
		esac
	done	

	#cmds
	case ${CMD} in
		list-ip) fncListIp ;; 
		list-hosts) fncListHosts ;; 
		list-uri) fncListUri ;; 
		hist-ip) fncHistIp ;;
		hist-load)  fncHistLoad ;;
	esac
fi

echo "$LOGS"
